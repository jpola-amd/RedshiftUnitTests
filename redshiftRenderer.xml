<?xml version="1.0"?>
<!DOCTYPE renderer SYSTEM "renderer.dtd">
<!--
  Top level tag, mandatory:
    <renderer>: "desc" gives a one line description.

  Header tags, not mandatory, must be specified only once.
    <melheader>: "s" is a mel script executed just after the file is read 
    <meltrailer>: "s" is a mel script executed after all flags are converted
        to mel. Should contain at least the rendering command.

  Other tags:
    <sep>: "desc" produces a line in the help. Blank if desc is missing.
    <attr>: produces a setAttr line.
        "n" is the flag name.
        "s" the attribute name.
        "t" the parameter type, used in help description.
        "h" the help description.
    <attrString>: produces a setAttr line for a string attribute.
        Same parameters as <attr>, but for string attributes.
    <mel>: Calls a mel script.
        "n" is the flag name.
        "p" the number of parameters.
        "s" the string defining the action %1 ... %p are replaced with values
                read after the flag.
        "t" the parameter types, used in help description.
        "h" the help description.
-->
<renderer desc='Redshift for Maya'>
	<melheader s='string $rl=""; string $rp=""; float $resize=-1.; redshiftRegisterRenderer(); redshiftGetRedshiftOptionsNode(true);'/>
	<meltrailer s='setMayaSoftwareLayers($rl, $rp); setImageSizePercent($resize); redshiftBatchRender("");'/>
	<sep/>
	<!-- ______________________________________________________________ -->
	<sep desc="General purpose flags"/>
	<mel n="rd" p="1" s='workspace -fr "images" "%1";workspace -fr "depth" "%1";' t="path" h="Directory in which to store image files"/>
	<mel n="im" p="1" s='setAttr defaultRenderGlobals.imageFilePrefix -type "string" "%1"; setAttr redshiftOptions.imageFilePrefix -type "string" "%1";' t="filename" h="Image file output name"/>
	<mel n="of" s='redshiftSetImageFormat("%1")' p="1" t="string" h="Output image file format. See the Render Settings window to find available formats"/>
	<mel n="gpu" s='redshiftSelectComputeDevices(%1)' p="1" t="int array" h="Compute devices to use"/>
	<mel n="cachePath" s='rsPreference -save false -stringValue "CacheFolder" "%1"' p="1" t="path" h="Texture cache path"/>
	<mel n="progressive" s='setAttr redshiftOptions.progressiveRenderingEnabled 1; setAttr redshiftOptions.progressiveRenderingNumPasses %1' p="1" t="int" h="Render using Progressive Rendering with the given number of passes"/>
	<mel n="logLevel" s='setAttr redshiftOptions.logLevel %1;' p="1" t="int" h="Redshift log level"/>
	<sep/>
	<!-- ______________________________________________________________ -->
	<sep desc="Frame numbering options"/>
	<mel n="s" p="1" t="float" s='removeRenderLayerAdjustmentAndUnlock defaultRenderGlobals.animation; setAttr defaultRenderGlobals.animation 1; removeRenderLayerAdjustmentAndUnlock defaultRenderGlobals.startFrame; setAttr defaultRenderGlobals.startFrame %1' h="Start frame for an animation sequence"/>
	<mel n="e" p="1" t="float" s='removeRenderLayerAdjustmentAndUnlock defaultRenderGlobals.animation; setAttr defaultRenderGlobals.animation 1; removeRenderLayerAdjustmentAndUnlock defaultRenderGlobals.endFrame; setAttr defaultRenderGlobals.endFrame %1' h="End frame for an animation sequence"/>
	<attr n="b" s="defaultRenderGlobals.byFrameStep" t="float" h="By frame (or step) for an animation sequence"/>
	<attr n="skipExistingFrames" s="redshiftOptions.skipExistingFrames" t="boolean" h="Skip frames that are already rendered (if true) or force rendering all frames (if false)"/>
	<attr n="pad" s="defaultRenderGlobals.extensionPadding" t="int" h="Number of digits in the output image frame file name extension"/>
	<mel n="rfs" p="1" t="int" s="removeRenderLayerAdjustmentAndUnlock defaultRenderGlobals.modifyExtension; setAttr defaultRenderGlobals.modifyExtension 1; removeRenderLayerAdjustmentAndUnlock defaultRenderGlobals.startExtension; setAttr defaultRenderGlobals.startExtension %1" h="Renumber Frame Start: number for the first image when renumbering frames"/>
	<attr n="rfb" s="defaultRenderGlobals.byExtension" t="int" h="Renumber Frame By (or step) used for renumbering frames"/>
	<sep/>
	<!-- ______________________________________________________________ -->
	<sep desc="Camera options"/>
	<mel n="cam" s='makeCameraRenderable("%1")' p="1" t="name" h="Specify which camera to be rendered"/>
	<sep/>
	<!-- ______________________________________________________________ -->
	<sep desc="Resolution options"/>
	<attr n="x" s="defaultResolution.width" t="int" h="Set X resolution of the final image"/>
	<attr n="y" s="defaultResolution.height" t="int" h="Set Y resolution of the final image"/>
	<mel n="percentRes" s="$resize=%1" p="1" t="float" h="Renders the image using percent of the resolution"/>
	<attr n="ard" s="defaultResolution.deviceAspectRatio" t="float" h="Device aspect ratio for the rendered image"/>
	<attr n="par" s="defaultResolution.pixelAspectRatio" t="float" h="Pixel aspect ratio for the rendered image"/>
	<mel n="reg" s="setAttr defaultRenderGlobals.leftRegion %1;setAttr defaultRenderGlobals.rightRegion %2;setAttr defaultRenderGlobals.bottomRegion %3;setAttr defaultRenderGlobals.topRegion %4;setAttr defaultRenderGlobals.useRenderRegion true;" p="4" t="int" h="Set render region"/>
    <sep/>
	<sep/>
	<!-- ______________________________________________________________ -->
	<sep desc="Render Layers and Passes:"/>
	<mel n="rl" s='$rl="%1"' p="1" t="boolean|name(s)" h="Render each render layer separately"/>
	<sep/>
	<!-- ______________________________________________________________ -->
	<sep desc="Mel callbacks"/>
	<attrString n="preRender" s="redshiftOptions.preRenderMel" t="string" h="Mel code executed before rendering"/>
	<attrString n="postRender" s="redshiftOptions.postRenderMel" t="string" h="Mel code executed after rendering"/>
	<attrString n="preLayer" s="redshiftOptions.preRenderLayerMel" t="string" h="Mel code executed before each render layer"/>
	<attrString n="postLayer" s="redshiftOptions.postRenderLayerMel" t="string" h="Mel code executed after each render layer"/>
	<attrString n="preFrame" s="redshiftOptions.preRenderFrameMel" t="string" h="Mel code executed before each frame"/>
	<attrString n="postFrame" s="redshiftOptions.postRenderFrameMel" t="string" h="Mel code executed after each frame"/>
	<sep/>
</renderer>